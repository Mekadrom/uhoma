plugins {
    id 'java'
    id 'pmd'
    id 'io.freefair.lombok' version '6.3.0' apply false
    id 'org.springframework.boot' version '2.5.0' apply false
    id 'com.adarshr.test-logger' version '3.2.0' apply false
    id 'info.solidsoft.pitest' version '1.7.0' apply false
    id 'org.sonarqube' version '3.3' apply false
}

def ordered(String... dependencyPaths) {
    def dependencies = dependencyPaths.collect { tasks.getByPath(it) }
    for (int i = 0; i < dependencies.size() - 1; i++) {
        dependencies[i + 1].mustRunAfter(dependencies[i])
    }
    return dependencies
}

sourceCompatibility = 17
targetCompatibility = 17

apply from: 'env.gradle'

ext {
    secretContents = new File(gradle.ext.secretPath).text

    if (gradle.ext.gcpArtifactRoot == "") {
        serverArtifactTag = "${gradle.ext.serverArtifactName}"
        actionServerArtifactTag = "${gradle.ext.actionServerArtifactName}"
        frontendArtifactTag = "${gradle.ext.frontendArtifactName}"
    } else {
        serverArtifactTag = "${gradle.ext.gcpArtifactRoot}/${gradle.ext.serverArtifactName}"
        actionServerArtifactTag = "${gradle.ext.gcpArtifactRoot}/${gradle.ext.actionServerArtifactName}"
        frontendArtifactTag = "${gradle.ext.gcpArtifactRoot}/${gradle.ext.frontendArtifactName}"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

compileJava.enabled = false
compileTestJava.enabled = false

build {
    dependsOn ordered(':common:publishToMavenLocal', ':server:build', ':simulator:build', ':actionserver:build', project.hasProperty('buildProd') ? ':frontend:buildFrontend' : ':frontend:buildFrontendDev')
    doLast {
        delete files('build/tmp', 'build/lombok', 'build/libs')
    }
}

task distribute {
    dependsOn ordered(':common:jar', ':server:bootJar', ':simulator:jar', ':actionserver:bootJar', project.hasProperty('buildProd') ? ':frontend:buildFrontend' : ':frontend:buildFrontendDev')
    doLast {
        delete files('build/tmp', 'build/lombok', 'build/libs')
    }
}

task reports {
    dependsOn ':clean'
    dependsOn ':pmdMain'
    dependsOn ':pmdTest'
    dependsOn ':pmdItest'
    dependsOn ':test'
    dependsOn ':itest'
    dependsOn ':pitest'
}

clean {
    doFirst {
        delete files(gradle.ext.distDir.path)
    }
    dependsOn ':common:clean'
    dependsOn ':server:clean'
    dependsOn ':simulator:clean'
    dependsOn ':actionserver:clean'
    dependsOn ':frontend:clean'
}

test {
    dependsOn ':actionserver:test'
    dependsOn ':common:test'
    dependsOn ':server:test'
    dependsOn ':simulator:test'
}

task itest {
    dependsOn ':actionserver:itest'
    dependsOn ':common:itest'
    dependsOn ':server:itest'
    dependsOn ':simulator:itest'
}

task pmd {
    dependsOn pmdMain
    dependsOn pmdTest
    dependsOn ':pmdItest'
}

pmdMain {
    dependsOn ':actionserver:pmdMain'
    dependsOn ':common:pmdMain'
    dependsOn ':server:pmdMain'
    dependsOn ':simulator:pmdMain'
}

pmdTest {
    dependsOn ':actionserver:pmdTest'
    dependsOn ':common:pmdTest'
    dependsOn ':server:pmdTest'
    dependsOn ':simulator:pmdTest'
}

task pmdItest {
    dependsOn ':actionserver:pmdItest'
    dependsOn ':common:pmdItest'
    dependsOn ':server:pmdItest'
    dependsOn ':simulator:pmdItest'
}

task pitest {
    dependsOn ':actionserver:pitest'
    dependsOn ':common:pitest'
    dependsOn ':server:pitest'
    dependsOn ':simulator:pitest'
}

task sonarqube {
    dependsOn ':actionserver:sonarqube'
    dependsOn ':common:sonarqube'
    dependsOn ':server:sonarqube'
    dependsOn ':simulator:sonarqube'
}

task buildServerImage(type: Exec) {
    dependsOn distribute
    executable = "${gradle.ext.imgBuildExec}"
    args = ['build', "${rootDir}", '-f', 'env/kubernetes/server/Dockerfile', '-t', "${serverArtifactTag}:${version}", '-t', "${serverArtifactTag}:latest", '--build-arg', "artifactPath=${gradle.ext.distDir.name}/server/build/libs/"]
}

task buildActionServerImage(type: Exec) {
    dependsOn distribute
    executable = "${gradle.ext.imgBuildExec}"
    args = ['build', "${rootDir}", '-f', 'env/kubernetes/actionserver/Dockerfile', '-t', "${actionServerArtifactTag}:${version}", '-t', "${actionServerArtifactTag}:latest", '--build-arg', "artifactPath=${gradle.ext.distDir.name}/actionserver/build/libs/"]
}

task buildFrontendImage(type: Exec) {
    dependsOn distribute
    executable = "${gradle.ext.imgBuildExec}"
    args = ['build', "${rootDir}", '-f', 'env/kubernetes/frontend/Dockerfile', '-t', "${frontendArtifactTag}:${version}", '-t', "${frontendArtifactTag}:latest", '--build-arg', "artifactPath=${gradle.ext.distDir.name}/frontend/dist/frontend/"]
}

task pushServerImageToMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['image', 'load', serverArtifactTag]
}

task pushActionServerImageToMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['image', 'load', actionServerArtifactTag]
}

task pushFrontendImageToMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['image', 'load', frontendArtifactTag]
}

task pushImagesToMinikube() {
    dependsOn pushServerImageToMinikube
    dependsOn pushActionServerImageToMinikube
    dependsOn pushFrontendImageToMinikube
}

task pushServerImage(type: Exec) {
    executable = "${gradle.ext.imgBuildExec}"
    args = ['push', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.serverArtifactName}:${version}"]
}

task pushActionServerImage(type: Exec) {
    executable = "${gradle.ext.imgBuildExec}"
    args = ['push', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.actionServerArtifactName}:${version}"]
}

task pushFrontendImage(type: Exec) {
    executable = "${gradle.ext.imgBuildExec}"
    args = ['push', "${gradle.ext.gcpArtifactRoot}/${gradle.ext.frontendArtifactName}:${version}"]
}

task buildImages {
    dependsOn buildServerImage
    dependsOn buildActionServerImage
    dependsOn buildFrontendImage
}

task pushImages {
    dependsOn pushServerImage
    dependsOn pushActionServerImage
    dependsOn pushFrontendImage
}

task buildAndPushImages {
    dependsOn buildImages
    dependsOn pushImages
}

task copyKustomizationFiles(type: Copy) {
    from('env/kubernetes/') {
        include '**/*.yml'
    }
    into "${gradle.ext.distDir.path}/kubernetes/"
}

task kustomize(type: Exec) {
    dependsOn copyKustomizationFiles
    workingDir = "${gradle.ext.distDir.path}/kubernetes/"
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['kustomize', '-o', 'deployment.yml']
}

task createSecret(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['create', 'secret', 'docker-registry', 'gcr-json-key', "--docker-server=${gradle.ext.artifactoryUrl}", '--docker-username=_json_key', "--docker-password='${secretContents}'", "--docker-email=${gradle.ext.dockerEmail}"]
}

task kubeApply(type: Exec) {
    workingDir = "${gradle.ext.distDir.path}/kubernetes/"
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['apply', '-f', 'deployment.yml']
}

task buildAndDeploy(type: Exec) {
    dependsOn distribute
    dependsOn buildAndPushImages
    dependsOn kustomize
    dependsOn kubeApply
}

task startMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['start', "--nodes=${gradle.ext.clusterNodeCount}"]
}

task tagWorker2(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['label', 'node', 'minikube-m02', 'node-role.kubernetes.io/worker=worker']
}

task tagWorker3(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['label', 'node', 'minikube-m03', 'node-role.kubernetes.io/worker=worker']
}

task tagWorkers {
    dependsOn tagWorker2
    dependsOn tagWorker3
}

task stopMinikube(type: Exec) {
    executable = "${gradle.ext.clusterExec}"
    args = ['stop']
}

task deleteMinikube(type: Exec) {
    dependsOn stopMinikube
    executable = "${gradle.ext.clusterExec}"
    args = ['delete']
}

task deleteServerImageDeployment(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'deployment', 'app-server0']
}

task deleteActionServerImageDeployment(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'deployment', 'action-server0']
}

task deleteFrontendImageDeployment(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'deployment', 'frontend0']
}

task deleteImageDeployments {
    dependsOn deleteServerImageDeployment
    dependsOn deleteActionServerImageDeployment
    dependsOn deleteFrontendImageDeployment
}

task deleteServerContainerService(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'service', 'app-server']
}

task deleteActionServerContainerService(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'service', 'action-server']
}

task deleteFrontendContainerService(type: Exec) {
    executable = "${gradle.ext.kubeCmdExec}"
    args = ['delete', 'service', 'frontend']
}

task deleteImageServices {
    dependsOn deleteServerContainerService
    dependsOn deleteActionServerContainerService
    dependsOn deleteFrontendContainerService
}

task fullClusterSetup {
    dependsOn ordered(':buildAndPushImages', ':kustomize', ':startMinikube', ':tagWorkers', ':createSecret', ':kubeApply')
}

task fullClusterSetupLocal {
    dependsOn ordered(':buildImages', ':kustomize', ':startMinikube', ':pushImagesToMinikube', ':tagWorkers', ':kubeApply')
}

task reloadCluster {
    dependsOn ordered(':buildImages', ':kustomize', ':deleteImageDeployments', ':pushImagesToMinikube', ':kubeApply')
}

task takeDownProjectContainers {
    dependsOn ordered(':deleteImageDeployments', ':deleteImageServices')
}

task initDb(type: Exec) {
    workingDir = 'hadb/'
    executable = "./initdb.sh"
    args = ['-u', "${gradle.ext.dbUsername}", '-p', "${gradle.ext.dbPassword}", '-U', "${gradle.ext.dbUrl}", '-P', "${gradle.ext.dbPort}", '-d', "${gradle.ext.dbDomain}", '-s', "${gradle.ext.dbSchema}"]
}

task cleanDb(type: Exec) {
    workingDir = 'hadb/'
    executable = './cleandb.sh'
    args = ['-u', "${gradle.ext.dbUsername}", '-p', "${gradle.ext.dbPassword}", '-U', "${gradle.ext.dbUrl}", '-P', "${gradle.ext.dbPort}", '-d', "${gradle.ext.dbDomain}", '-s', "${gradle.ext.dbSchema}"]
}

task deltaRun(type: Exec) {
    workingDir = 'hadb/'
    executable = './deltarun.sh'
    args = ['-u', "${gradle.ext.dbUsername}", '-p', "${gradle.ext.dbPassword}", '-U', "${gradle.ext.dbUrl}", '-P', "${gradle.ext.dbPort}", '-d', "${gradle.ext.dbDomain}"]
}

task reloadDb {
    dependsOn ordered(':cleanDb', ':initDb', ':deltaRun')
}
